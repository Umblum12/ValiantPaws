//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem/AnimalInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AnimalInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AnimalInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AnimalInput"",
    ""maps"": [
        {
            ""name"": ""Animal"",
            ""id"": ""6e5ee026-960e-4da8-b4bb-8c5fde6ed203"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""178f3ac6-a88f-476c-b7e3-d937f0bb5b29"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""4d239bac-01f9-4aa4-8439-c8b220c3aeee"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""ca1cbf14-11bb-4220-b912-4866562b315c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""a8cdcf45-b5ad-44b7-9762-831f2fa70fad"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dig"",
                    ""type"": ""Button"",
                    ""id"": ""1f6f4bdd-68fe-46b0-83b6-e8e7c807b651"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UnlockCam"",
                    ""type"": ""Button"",
                    ""id"": ""c17f5819-21ff-4bb4-8d86-436dca57ec75"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""6f62b109-627f-4fd6-8f01-080b72538f7e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookCam"",
                    ""type"": ""Value"",
                    ""id"": ""79af5050-d3d8-4d1a-9801-6f954d52fa1f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c1007b24-5308-4587-b147-1003cf0a8243"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea4af9b5-0d50-4e7e-b1fb-24a543dac4ee"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""cda80bfc-a678-4cfb-b8d9-608d98686c18"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2610f420-ded5-420e-9cb1-c7ee20238a9b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b41617ef-a76c-47ae-9eba-5b44e8211d6e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0c2d3580-dd0b-41ab-aae8-9eda27780ff9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b4e9bb6a-b112-4b7a-9b08-3d4e6887155d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1dba8074-129b-4fa5-8918-4d8d26d761fc"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e9f284c-f62d-4e31-ad23-88badc5574d3"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b9784ce-90c2-4656-8768-3ac64ac0513a"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98520627-4288-429a-9a30-06bca01a3f30"",
                    ""path"": ""<XInputController>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""977a384b-8c70-456f-8d5d-0a1bd467b75c"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf9bf31c-3ac4-47be-82dd-b9cec8953068"",
                    ""path"": ""<XInputController>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcf25e7b-f9e0-43fe-ae5d-56df11db3afa"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dig"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07cf323e-03a3-49c8-a7b3-b4f128c3e6f7"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dig"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea7ef177-f6c2-44b3-adef-102f6cf97985"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnlockCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1468af02-0a50-4deb-906d-835f3a5812d2"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5158e4b1-7072-4c5c-9e0f-77a7631d62ba"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d74a108-a0d5-45f7-a19c-5a8a99ac9edf"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""acc85235-ac38-42aa-b94d-a2a1cf4a78b0"",
            ""actions"": [
                {
                    ""name"": ""Pausa"",
                    ""type"": ""Button"",
                    ""id"": ""a15a3889-df20-4479-9b21-0f8796eb4a20"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1cac9bc7-840c-482e-868b-b7c714411abe"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pausa"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Animal
        m_Animal = asset.FindActionMap("Animal", throwIfNotFound: true);
        m_Animal_Move = m_Animal.FindAction("Move", throwIfNotFound: true);
        m_Animal_Jump = m_Animal.FindAction("Jump", throwIfNotFound: true);
        m_Animal_Crouch = m_Animal.FindAction("Crouch", throwIfNotFound: true);
        m_Animal_Run = m_Animal.FindAction("Run", throwIfNotFound: true);
        m_Animal_Dig = m_Animal.FindAction("Dig", throwIfNotFound: true);
        m_Animal_UnlockCam = m_Animal.FindAction("UnlockCam", throwIfNotFound: true);
        m_Animal_Scroll = m_Animal.FindAction("Scroll", throwIfNotFound: true);
        m_Animal_LookCam = m_Animal.FindAction("LookCam", throwIfNotFound: true);
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Pausa = m_Menu.FindAction("Pausa", throwIfNotFound: true);
    }

    ~@AnimalInput()
    {
        UnityEngine.Debug.Assert(!m_Animal.enabled, "This will cause a leak and performance issues, AnimalInput.Animal.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Menu.enabled, "This will cause a leak and performance issues, AnimalInput.Menu.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Animal
    private readonly InputActionMap m_Animal;
    private List<IAnimalActions> m_AnimalActionsCallbackInterfaces = new List<IAnimalActions>();
    private readonly InputAction m_Animal_Move;
    private readonly InputAction m_Animal_Jump;
    private readonly InputAction m_Animal_Crouch;
    private readonly InputAction m_Animal_Run;
    private readonly InputAction m_Animal_Dig;
    private readonly InputAction m_Animal_UnlockCam;
    private readonly InputAction m_Animal_Scroll;
    private readonly InputAction m_Animal_LookCam;
    public struct AnimalActions
    {
        private @AnimalInput m_Wrapper;
        public AnimalActions(@AnimalInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Animal_Move;
        public InputAction @Jump => m_Wrapper.m_Animal_Jump;
        public InputAction @Crouch => m_Wrapper.m_Animal_Crouch;
        public InputAction @Run => m_Wrapper.m_Animal_Run;
        public InputAction @Dig => m_Wrapper.m_Animal_Dig;
        public InputAction @UnlockCam => m_Wrapper.m_Animal_UnlockCam;
        public InputAction @Scroll => m_Wrapper.m_Animal_Scroll;
        public InputAction @LookCam => m_Wrapper.m_Animal_LookCam;
        public InputActionMap Get() { return m_Wrapper.m_Animal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AnimalActions set) { return set.Get(); }
        public void AddCallbacks(IAnimalActions instance)
        {
            if (instance == null || m_Wrapper.m_AnimalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AnimalActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Dig.started += instance.OnDig;
            @Dig.performed += instance.OnDig;
            @Dig.canceled += instance.OnDig;
            @UnlockCam.started += instance.OnUnlockCam;
            @UnlockCam.performed += instance.OnUnlockCam;
            @UnlockCam.canceled += instance.OnUnlockCam;
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
            @LookCam.started += instance.OnLookCam;
            @LookCam.performed += instance.OnLookCam;
            @LookCam.canceled += instance.OnLookCam;
        }

        private void UnregisterCallbacks(IAnimalActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Dig.started -= instance.OnDig;
            @Dig.performed -= instance.OnDig;
            @Dig.canceled -= instance.OnDig;
            @UnlockCam.started -= instance.OnUnlockCam;
            @UnlockCam.performed -= instance.OnUnlockCam;
            @UnlockCam.canceled -= instance.OnUnlockCam;
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
            @LookCam.started -= instance.OnLookCam;
            @LookCam.performed -= instance.OnLookCam;
            @LookCam.canceled -= instance.OnLookCam;
        }

        public void RemoveCallbacks(IAnimalActions instance)
        {
            if (m_Wrapper.m_AnimalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAnimalActions instance)
        {
            foreach (var item in m_Wrapper.m_AnimalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AnimalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AnimalActions @Animal => new AnimalActions(this);

    // Menu
    private readonly InputActionMap m_Menu;
    private List<IMenuActions> m_MenuActionsCallbackInterfaces = new List<IMenuActions>();
    private readonly InputAction m_Menu_Pausa;
    public struct MenuActions
    {
        private @AnimalInput m_Wrapper;
        public MenuActions(@AnimalInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pausa => m_Wrapper.m_Menu_Pausa;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void AddCallbacks(IMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuActionsCallbackInterfaces.Add(instance);
            @Pausa.started += instance.OnPausa;
            @Pausa.performed += instance.OnPausa;
            @Pausa.canceled += instance.OnPausa;
        }

        private void UnregisterCallbacks(IMenuActions instance)
        {
            @Pausa.started -= instance.OnPausa;
            @Pausa.performed -= instance.OnPausa;
            @Pausa.canceled -= instance.OnPausa;
        }

        public void RemoveCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuActions @Menu => new MenuActions(this);
    public interface IAnimalActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnDig(InputAction.CallbackContext context);
        void OnUnlockCam(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
        void OnLookCam(InputAction.CallbackContext context);
    }
    public interface IMenuActions
    {
        void OnPausa(InputAction.CallbackContext context);
    }
}
